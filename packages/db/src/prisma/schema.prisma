// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId    String   @id @default(uuid())
  name      String
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages  Message[]
  chats     Chat[]
  friends   UserFriend[] @relation("UserFriendsUser")
  friendsOf UserFriend[] @relation("UserFriendsFriend")

  @@map("users")
}

model Chat {
  chatId      String  @id @default(uuid())
  name        String?
  description String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User?   @relation(fields: [ownerId], references: [userId])
  ownerId String?

  @@map("chats")
}

model UserFriend {
  userfriendId String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User?  @relation("UserFriendsUser", fields: [userId], references: [userId])
  userId   String
  friend   User?  @relation("UserFriendsFriend", fields: [friendId], references: [userId])
  friendId String

  @@map("userfriends")
  @@unique([userId, friendId])
}

model Message {
  messageId String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User?   @relation(fields: [senderId], references: [userId], onDelete: Cascade)
  senderId String?

  @@map("messages")
}
