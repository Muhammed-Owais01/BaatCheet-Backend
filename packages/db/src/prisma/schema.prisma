// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId    String   @id @default(uuid())
  name      String
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages  Message[] @relation("UserMessages")
  friends   UserFriend[] @relation("UserFriendsUser")
  friendsOf UserFriend[] @relation("UserFriendsFriend")
  requests  Request[] @relation("RequestRequester")
  requestsOf Request[] @relation("RequestReceiver")
  memberships ChatMembership[] @relation("UserMemberships")
  guilds    GuildMembership[] @relation("UserGuilds")
  ownedGuilds Guild[] @relation("GuildOwner")

  @@map("users")
}

enum ChatType {
  DIRECT @map("DIRECT")
  GROUP  @map("GROUP")
}

model Chat {
  chatId       String   @id @default(uuid())
  type         ChatType @default(DIRECT)
  name         String?
  lastMessageAt DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  messages     Message[] @relation("ChatMessages")
  members      ChatMembership[] @relation("ChatMembers")
  guild        Guild?    @relation("GuildChats", fields: [guildId], references: [guildId], onDelete: SetNull)
  guildId      String?

  @@map("chats")
  @@index([lastMessageAt])
  @@index([guildId])
}

model ChatMembership {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chat     Chat   @relation("ChatMembers", fields: [chatId], references: [chatId], onDelete: Cascade)
  chatId   String
  user     User   @relation("UserMemberships", fields: [userId], references: [userId], onDelete: Cascade)
  userId   String

  @@id([chatId, userId])
  @@index([userId])
  @@map("chatmemberships")
}

model Guild {
  guildId   String   @id @default(uuid())
  guildName String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner     User     @relation("GuildOwner", fields: [ownerId], references: [userId], onDelete: Cascade)
  ownerId   String
  chats     Chat[] @relation("GuildChats")
  roles     GuildRole[] @relation("GuildRoles")
  members   GuildMembership[] @relation("GuildMembers")

  @@map("guilds")
}

model GuildRole {
  roleId    String   @id @default(uuid())
  roleName  String
  color     String?
  position  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  guild     Guild   @relation("GuildRoles", fields: [guildId], references: [guildId], onDelete: Cascade)
  guildId   String
  members   GuildMembership[] @relation("GuildRoleMembers")

  @@map("guildroles")
  @@index([guildId])
}

model GuildMembership {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  guild   Guild     @relation("GuildMembers", fields: [guildId], references: [guildId], onDelete: Cascade)
  guildId String
  user    User      @relation("UserGuilds", fields: [userId], references: [userId], onDelete: Cascade)
  userId  String
  role    GuildRole @relation("GuildRoleMembers", fields: [roleId], references: [roleId], onDelete: Restrict)
  roleId  String

  @@id([guildId, userId, roleId])
  @@index([userId])
  @@map("guildmemberships")
}

model UserFriend {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User?  @relation("UserFriendsUser", fields: [userId], references: [userId], onDelete: Cascade)
  userId   String
  friend   User?  @relation("UserFriendsFriend", fields: [friendId], references: [userId], onDelete: Cascade)
  friendId String

  @@map("userfriends")
  @@id([userId, friendId])
}

model Request {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  requester   User?  @relation("RequestRequester", fields: [requesterId], references: [userId], onDelete: Cascade)
  requesterId String
  receiver    User?  @relation("RequestReceiver", fields: [receiverId], references: [userId], onDelete: Cascade)
  receiverId  String

  @@map("requests")
  @@id([requesterId, receiverId])
}

model Message {
  messageId String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User?   @relation("UserMessages", fields: [senderId], references: [userId], onDelete: SetNull)
  senderId String?
  chat     Chat    @relation("ChatMessages", fields: [chatId], references: [chatId], onDelete: Cascade)
  chatId   String

  @@map("messages")
  @@index([chatId, createdAt])
  @@index([chatId, senderId])
}
