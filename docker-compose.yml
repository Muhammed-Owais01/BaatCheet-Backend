version: "3.9"

services:
  postgres:
    image: postgres:15-alpine
    container_name: bc-postgres
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: bcdb
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data

  redis:
    image: redis:7-alpine
    container_name: bc-redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  kafka:
    image: apache/kafka:latest
    container_name: broker
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092,EXTERNAL://localhost:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@broker:9093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    ports:
      - "9094:9094"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "./opt/kafka/bin/kafka-broker-api-versions.sh --bootstrap-server localhost:9092 > /dev/null 2>&1",
        ]
      interval: 10s
      timeout: 10s
      retries: 5

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8088:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: broker:9092
      KAFKA_CLUSTERS_0_READONLY: "false"
    depends_on:
      kafka:
        condition: service_healthy

  # -----------------------------------------------------
  # ðŸ§  OpenFGA (authorization system)
  # -----------------------------------------------------
  create-openfga-schema:
    image: postgres:15-alpine
    container_name: create-openfga-schema
    depends_on:
      postgres:
        condition: service_started
    entrypoint: ["/bin/sh", "-c"]
    command: >
      "until pg_isready -h postgres -U postgres; do sleep 1; done;
      psql postgres://postgres:postgres@postgres:5432/bcdb -c 'CREATE SCHEMA IF NOT EXISTS openfga;'"

  migrate:
    depends_on:
      create-openfga-schema:
        condition: service_completed_successfully
    image: openfga/openfga:latest
    container_name: openfga-migrate
    command: migrate
    environment:
      - OPENFGA_DATASTORE_ENGINE=postgres
      - OPENFGA_DATASTORE_URI=postgres://postgres:postgres@postgres:5432/bcdb?sslmode=disable&search_path=openfga



  openfga:
    depends_on:
      migrate:
        condition: service_completed_successfully
    image: openfga/openfga:latest
    container_name: openfga
    command: run
    environment:
      - OPENFGA_DATASTORE_ENGINE=postgres
      - OPENFGA_DATASTORE_URI=postgres://postgres:postgres@postgres:5432/bcdb?sslmode=disable&search_path=openfga
      - OPENFGA_LOG_FORMAT=json
    ports:
      - "8080:8080"   # HTTP API
      - "8082:8082"   # gRPC (optional)
      - "3000:3000"   # Playground (disable in prod)

volumes:
  pg_data:
  redis_data:
  kafka_data:
